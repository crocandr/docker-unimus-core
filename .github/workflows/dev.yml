# This is a basic workflow to help you get started with Actions
#
name: Auto-CI-dev

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
#  push:
#    branches: [ "dev" ]
#  pull_request:
#    branches: [ "dev" ]
#  schedule:
#    # UTC time 3:00 = 5:00 CET
#    - cron: '17 3 * * *' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  jarsigner:
    runs-on: openjdk:slim
    steps:
      - uses: actions/checkout@v3
        with:
          ref: dev
      - name: check java signing
        run: |
          JAVA_ARTIFACT_URL=$( grep -i "ENV.*DOWNLOAD_URL" Dockerfile | awk '{ print $3 }' )
          echo "Artifact url: $JAVA_ARTIFACT_URL"
          #FILENAME=$( basename $JAVA_ARTIFACT_URL )
          FILENAME="unimus-core.jar"
          echo "Filename $FILENAME"
          curl -k -L -o "$FILENAME" "$JAVA_ARTIFACT_URL" || { echo "Download error"; exit 1; }
          ls -hal $FILENAME
          jarsigner -verify $FILENAME | grep -i "jar verified" || { echo "Java binary is not verified"; exit 1; }
          echo "Checksum: "
          sha1sum $FILENAME | tee checksum.signed
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: checksum
          path: checksum.signed
  build-amd64:
    needs: jarsigner
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: dev
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: checksum
      - name: build image - AMD64
        run: |
          cp -f checksum.signed files || { echo "Checksum file not found"; exit 1; }
          docker build --rm -t croc/unimus-core . || { echo "docker image build failed - amd64"; exit 1; }
          docker tag croc/unimus-core croc/unimus-core:dev
          docker tag croc/unimus-core quay.io/croc/unimus-core:dev
          docker images croc/unimus-core
      - name: push container
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
          QUAYIO_USER: ${{ secrets.QUAYIO_USER }}
          QUAYIO_PASS: ${{ secrets.QUAYIO_PASS }}
        run: |
          docker images
          echo "$DOCKERHUB_PASS" | docker login --username=$DOCKERHUB_USER --password-stdin
          echo "$QUAYIO_PASS" | docker login --username=$QUAYIO_USER --password-stdin quay.io
          docker images | grep -i unimus-core
          docker push croc/unimus-core:dev
          docker push quay.io/croc/unimus-core:dev
  build-arm64:
    needs: jarsigner
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          ref: dev
      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: checksum
      # buildx with quemu
      - name: qemu setup for buildx for arm build
        uses: docker/setup-qemu-action@v2
      - name: setup buildx for arm build
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: build image - ARM 64bit
        env:
          ARCH: ARM
        run: |
          echo "Buildx supported platforms: ${{ steps.buildx.outputs.platforms }}"

          cp -f checksum.signed files || { echo "Checksum file not found"; exit 1; }
          docker build --rm --platform linux/arm64 -t croc/unimus-core-arm64 . || { echo "docker image build failed - arm64"; exit 1; }
          docker tag croc/unimus-core-arm64 croc/unimus-core-arm64:dev
          docker tag croc/unimus-core-arm64 quay.io/croc/unimus-core-arm64:dev
          docker images croc/unimus-core-arm64
      - name: push container
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
          QUAYIO_USER: ${{ secrets.QUAYIO_USER }}
          QUAYIO_PASS: ${{ secrets.QUAYIO_PASS }}
        run: |
          docker images
          echo "$DOCKERHUB_PASS" | docker login --username=$DOCKERHUB_USER --password-stdin
          echo "$QUAYIO_PASS" | docker login --username=$QUAYIO_USER --password-stdin quay.io
          docker images | grep -i unimus-core-arm64
          docker push croc/unimus-core-arm64:dev
          docker push quay.io/croc/unimus-core-arm64:dev
